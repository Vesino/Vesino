name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: 'main'
          filters: |
            backend:
              - './**'

  backend:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      LOCAL_ENVIRONMENT: 1

    services:
      postgres:
        image: postgres:alpine
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: dev
          POSTGRES_PASSWORD: pronto
          POSTGRES_USER: pronto

      cache:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --entrypoint redis-server

      fakes3:
        image: fingershock/fakes3
        ports:
          - 4567:8000

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          python-version: 3.9.2

      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: /opt/hostedtoolcache/Python/3.9.2/x64/ # This path is specific to Ubuntu
          # If the requirements files change, the cache will not hit.
          key: python-${{ hashFiles('requirements/local.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/local.txt
          pip install --no-deps pandas==1.2.4
      - name: Python Linter
        working-directory: src/api
        run: flake8

      - name: Check database
        working-directory: .
        run: |
          python manage.py migrate
          python manage.py check --database default
      - name: Scan settings for security issues

      - name: Run Tests
        id: python_tests
        working-directory: .
        run: |
          coverage run --omit='*/migrations/*.py' manage.py test applications
          coverage report -m --skip-covered --omit='*/tests/*' --fail-under 70
  version:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs:
      - backend

    steps:
      - uses: actions/checkout@v2

      - uses: PssbleTrngle/VersionManagment@v2
        id: version
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          prefix: v

      - name: Next Version
        run: |
          echo "${{ steps.version.outputs.next }}"
          echo "${{ github.base_ref }}"
      - name: Tag commit
        if: github.base_ref == 'dev' && github.event.action == 'opened'
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "${{ steps.version.outputs.next }}"

env:
  #####
  # TODO: Update values when setting github secrets
  #####

  # Django Environment Settings
  DJANGO_DEBUG: 0
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

  # Database Settings
  DATABASE: postgres
  SQL_ENGINE: django.db.backends.postgresql_psycopg2

  SQL_HOST: localhost
  SQL_PORT: 5432

  # Postgres Settings
  POSTGRES_DB: dev
  POSTGRES_PASSWORD: pronto
  POSTGRES_USER: pronto

  # Redis Settings
  REDIS_DB_CACHE: redis
  REDIS_HOST: localhost
  REDIS_PORT: 6379
